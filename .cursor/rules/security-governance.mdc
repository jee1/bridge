---
globs: *security*,*auth*,*credential*,*governance*,*audit*
description: 보안 및 거버넌스 관련 규칙
---

# 보안 및 거버넌스 가이드라인

## 보안 원칙

### 자격 증명 관리
- **시크릿 매니저 사용**: 민감한 자격 증명은 `.env` 대신 시크릿 매니저에 저장
- **로컬 개발**: `.env.example`을 복제하여 사용
- **자격 증명 로테이션**: 정책 기반 자격 증명 저장 및 자동 로테이션
- **환경 변수 패턴**: `BRIDGE_<DOMAIN>_<PURPOSE>` 형식 준수

### 데이터 보호
- **쿼리 리라이팅**: 민감 컬럼 보호를 위한 자동 쿼리 수정
- **데이터 마스킹**: 민감한 데이터의 자동 마스킹 처리
- **접근 제어**: 역할 기반 접근 제어 (RBAC) 구현

## 거버넌스 요구사항

### 접근 제어
```python
from enum import Enum
from typing import List, Dict, Any
from pydantic import BaseModel

class Permission(Enum):
    READ = "read"
    WRITE = "write"
    ADMIN = "admin"
    AUDIT = "audit"

class Role(BaseModel):
    name: str
    permissions: List[Permission]
    scope: Dict[str, Any]  # 프로젝트, 커넥터, 데이터셋 범위

class AccessControl:
    """접근 제어 관리 클래스"""
    
    def check_permission(self, user: str, resource: str, action: Permission) -> bool:
        """사용자 권한 확인"""
        # 구현 내용
        pass
    
    def get_accessible_resources(self, user: str) -> List[str]:
        """사용자가 접근 가능한 리소스 목록 반환"""
        # 구현 내용
        pass
```

### 감사 및 추적
- **계보 추적**: 데이터의 출처와 변환 과정 추적
- **세션 로그**: 변경 불가능한 세션 로그 유지
- **감사 로그**: `/logs/audit/`에 구조화된 JSON 형태로 저장

### 감사 로그 구조
```json
{
  "timestamp": "2024-01-01T00:00:00Z",
  "user_id": "user123",
  "action": "query_execution",
  "resource": "database.table",
  "query_hash": "sha256_hash",
  "result_count": 1000,
  "execution_time_ms": 150,
  "ip_address": "192.168.1.1",
  "user_agent": "Bridge-Client/1.0"
}
```

## 보안 검사

### API 보안
- **API 키 인증**: FastAPI 의존성 주입을 통한 안전한 API 접근
- **Authorization 헤더**: Bearer 토큰을 통한 인증
- **권한 검사**: 각 엔드포인트별 접근 권한 확인
- **입력 검증**: Pydantic 모델을 통한 엄격한 데이터 검증

### 쿼리 보안
- **파라미터 바인딩**: 외부 쿼리 실행 로직에 파라미터 바인딩 강제
- **SQL 인젝션 방지**: 입력값 검증 및 이스케이프 처리
- **권한 검사**: 쿼리 실행 전 사용자 권한 확인

### 데이터 품질 가드레일
- **행 데이터 제한**: 결과 공유 전 개인정보 포함 행 제한
- **통계적 신뢰도**: 통계 결과의 신뢰도 검사
- **데이터 민감도**: 민감도 태그 기반 접근 제어

## 컴플라이언스

### 데이터 거버넌스
- **데이터 분류**: 민감도에 따른 데이터 분류 체계
- **보존 정책**: 데이터 보존 기간 및 삭제 정책
- **접근 로그**: 모든 데이터 접근에 대한 상세 로그

### 개인정보 보호
- **개인정보 식별**: 개인정보 포함 컬럼 자동 식별
- **마스킹 정책**: 개인정보 마스킹 규칙 적용
- **동의 관리**: 개인정보 처리 동의 상태 추적

## 보안 모니터링

### 이상 탐지
- **비정상 접근**: 비정상적인 데이터 접근 패턴 탐지
- **권한 남용**: 권한 범위를 벗어난 접근 시도 모니터링
- **성능 이상**: 비정상적인 쿼리 실행 시간 모니터링

### 알림 시스템
- **보안 이벤트**: 보안 관련 이벤트 실시간 알림
- **성능 임계값**: 성능 지표 임계값 초과 시 알림
- **시스템 상태**: 시스템 상태 이상 시 알림

## 보안 테스트

### 침투 테스트
- **권한 상승**: 권한 상승 취약점 테스트
- **데이터 유출**: 데이터 유출 시나리오 테스트
- **인증 우회**: 인증 우회 시도 테스트

### 보안 스캔
```bash
# 보안 취약점 스캔
bandit -r src/

# 의존성 취약점 검사
safety check

# 시크릿 검사
detect-secrets scan
```

## 비상 대응

### 보안 사고 대응
- **사고 분류**: 보안 사고 심각도 분류
- **대응 절차**: 사고 발생 시 대응 절차 수립
- **복구 계획**: 시스템 복구 및 데이터 복원 계획

### 백업 및 복구
- **정기 백업**: 중요 데이터의 정기적 백업
- **복구 테스트**: 백업 데이터 복구 테스트
- **재해 복구**: 재해 상황 시 복구 절차