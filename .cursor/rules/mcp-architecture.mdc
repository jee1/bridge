---
globs: *mcp*,*connector*,*orchestrator*,*workflow*
description: MCP 아키텍처 및 데이터 커넥터 관련 규칙
---

# MCP 아키텍처 가이드라인

## Model Context Protocol (MCP) 핵심 개념

### 컨텍스트 패키지
- 메타데이터, 쿼리 플랜, 샘플 레코드, 가이던스를 묶어 전달
- AI 세션 중 외부 도구 호출 지점 결정하는 실행 훅 포함
- 사용자 피드백을 수집하여 향후 세션에서 힌트로 재사용

### 데이터 커넥터 설계 원칙
- **스키마 탐색 및 프로파일링**: 데이터 타입, 기본 키, 갱신 주기 파악
- **정책 기반 자격 증명**: 저장 및 로테이션 관리
- **푸시다운 최적화**: 필터와 집계를 데이터 소스로 푸시하여 이그레스 최소화
- **선택적 캐싱**: 원본이 임의 탐색을 허용하지 않을 때 스냅샷 제공

## 커넥터 구현 패턴

### 실제 구현된 커넥터 인터페이스
```python
# src/bridge/connectors/base.py
from abc import ABC, abstractmethod
from typing import Dict, Any, Iterable

class BaseConnector(ABC):
    """데이터 소스별 공통 인터페이스"""
    
    def __init__(self, name: str, settings: Dict[str, Any]):
        self.name = name
        self.settings = settings

    @abstractmethod
    def test_connection(self) -> bool:
        """데이터 소스와의 연결을 테스트"""
        pass

    @abstractmethod
    def get_metadata(self) -> Dict[str, Any]:
        """데이터 소스의 메타데이터를 조회"""
        pass

    @abstractmethod
    def run_query(self, query: str, params: Dict[str, Any] = None) -> Iterable[Dict[str, Any]]:
        """쿼리를 실행하고 결과를 반환"""
        pass
```

### 구현된 커넥터들
- **MockConnector**: 테스트 및 개발용 모의 커넥터
- **ElasticsearchConnector**: Elasticsearch 데이터베이스 연동
- **PostgresConnector**: PostgreSQL 데이터베이스 연동 (계획됨)
- **MongoDBConnector**: MongoDB 데이터베이스 연동 (계획됨)

### 지원 데이터 소스
- **SQL 데이터베이스**: MySQL, PostgreSQL
- **NoSQL 데이터베이스**: MongoDB
- **분석 엔진**: Databricks, Elasticsearch
- **확장 예정**: Snowflake, BigQuery, Azure Data Explorer

## AI 오케스트레이터 설계 (FastAPI + Celery)

### 주요 책임
1. **의도 변환**: 사용자 의도를 구조화된 작업으로 변환
2. **실행 플랜 선정**: SQL 직접 실행, Databricks 잡, Elasticsearch 쿼리, Python UDF 등
3. **결과 병합**: 중간 결과를 병합하고 MCP 컨텍스트로 재패키징
4. **성능 추적**: 비용, 지연, 품질 지표를 추적하여 지속적 개선

### 실제 구현된 비동기 워크플로 처리
```python
# src/bridge/orchestrator/tasks.py
from celery import Celery
from typing import Dict, Any, List

@celery_app.task(name="bridge.execute_pipeline")
def execute_pipeline(payload: Dict[str, Any]) -> Dict[str, Any]:
    """컨텍스트 수집 및 도구 실행을 모사한 태스크"""
    intent = payload.get("intent", "")
    sources: List[str] = payload.get("sources", [])
    tools = payload.get("required_tools", [])
    
    # 커넥터 처리 및 메타데이터 수집
    collected_context = []
    missing_sources = []
    errors = []
    
    for source_name in sources:
        try:
            connector = connector_registry.get(source_name)
            result = _process_connector(connector, source_name)
            # 결과 처리...
        except ConnectorNotFoundError:
            missing_sources.append(source_name)
    
    return {
        "intent": intent,
        "status": _determine_status(missing_sources, errors),
        "collected_sources": collected_context,
        "missing_sources": missing_sources,
        "errors": errors,
        "triggered_tools": tools,
    }
```

### 실제 구현된 MCP 서버들
```python
# src/bridge/mcp_server_robust.py - 견고한 MCP 서버
class RobustMCPServer:
    def __init__(self):
        self.tools = [
            {
                "name": "query_database",
                "description": "데이터베이스 쿼리 실행",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "database": {"type": "string"},
                        "query": {"type": "string"}
                    },
                    "required": ["database", "query"]
                }
            },
            # ... 기타 도구들
        ]
    
    async def run(self):
        """MCP 서버 실행"""
        # JSON-RPC 요청 처리
        pass

# src/bridge/mcp_server_real.py - 실제 데이터베이스 연동 서버
class RealMCPServer:
    def __init__(self):
        # 실제 데이터베이스 커넥터 연동
        pass
```

### LangChain/OpenAI SDK 통합
```python
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain
from langchain.agents import Agent, Tool
from openai import AsyncOpenAI

class MCPOrchestrator:
    """MCP 오케스트레이터"""
    
    def __init__(self, openai_api_key: str) -> None:
        self.client = AsyncOpenAI(api_key=openai_api_key)
        self.prompt_template = PromptTemplate(
            input_variables=["context", "query", "tools"],
            template="""
            Context: {context}
            Available Tools: {tools}
            Query: {query}
            
            Generate MCP context package and execution plan.
            """
        )
    
    async def generate_mcp_context(self, query: str, available_tools: List[Tool]) -> Dict[str, Any]:
        """MCP 컨텍스트 패키지 생성"""
        # 프롬프트 템플릿을 활용한 컨텍스트 생성
        pass
```

### 워크플로 관리
- **프로젝트 단위**: 데이터 소스, 저장 분석, 접근 정책을 그룹화
- **템플릿 시스템**: 버전 관리되고 파라미터화된 AI 작업 템플릿
- **실행 샌드박스**: 명시적 도구 허용 목록으로 안전한 실행 환경 제공
- **비동기 처리**: Celery/Redis를 통한 장시간 실행 작업 처리

### MCP 서버 실행 방법
```bash
# 통합 서버 실행 (권장)
make mcp-server
python -m src.bridge.mcp_server_unified

# 환경 변수로 모드 지정
BRIDGE_MCP_MODE=development python -m src.bridge.mcp_server_unified
BRIDGE_MCP_MODE=production python -m src.bridge.mcp_server_unified
BRIDGE_MCP_MODE=real python -m src.bridge.mcp_server_unified
BRIDGE_MCP_MODE=mock python -m src.bridge.mcp_server_unified

# 개별 서버 실행 (개발/테스트용)
bridge-mcp
bridge-mcp-real
python -m src.bridge.mcp_server_robust
python -m src.bridge.mcp_server_real
python -m src.bridge.mcp_server_working
python -m src.bridge.mcp_server_minimal
python -m src.bridge.mcp_server_simple
python -m src.bridge.mcp_server_fixed

# 스크립트 파일을 통한 실행
python scripts/run_mcp_server.py
```

### MCP 서버 파일 구조
- `src/bridge/mcp_server_unified.py` - **통합된 MCP 서버** (환경 변수 기반 모드 지원)
  - **개발용**: `BRIDGE_MCP_MODE=development` (모의 응답)
  - **프로덕션용**: `BRIDGE_MCP_MODE=production` (실제 DB + 에러 복구)
  - **실제 DB 연동**: `BRIDGE_MCP_MODE=real` (직접 JSON-RPC)
  - **간단한 모드**: `BRIDGE_MCP_MODE=mock` (모의 응답 + 직접 JSON-RPC)
- `src/bridge/mcp_server.py` - 기본 MCP 서버 (통합 서버로 리다이렉트)
- `src/bridge/mcp_server_robust.py` - 견고한 버전 (개발/테스트용)
- `src/bridge/mcp_server_real.py` - 실제 데이터베이스 연동 (개발/테스트용)
- `src/bridge/mcp_server_working.py` - 작동하는 버전 (개발/테스트용)
- `src/bridge/mcp_server_minimal.py` - 최소 기능 버전 (개발/테스트용)
- `src/bridge/mcp_server_simple.py` - 단순 버전 (개발/테스트용)
- `src/bridge/mcp_server_fixed.py` - 수정된 버전 (개발/테스트용)

## AI 작업 템플릿

### 기술 통계
- **목표**: 지표 요약, 추세, 이상 징후 파악
- **입력**: 테이블 또는 논리 엔터티
- **출력**: 내러티브 요약과 핵심 지표

### 세그먼트 추출
- **목표**: 규칙 또는 유사도로 코호트 식별
- **입력**: 모수 엔터티, 필터 또는 특성
- **출력**: 세그먼트 정의와 내보내기 핸들

### 유사도 비교
- **목표**: 엔터티 또는 행동 간 유사도 측정
- **입력**: 피처 벡터, 유사도 지표
- **출력**: 상위 순위 목록과 설명 토큰

## 보안 및 거버넌스

### 접근 제어
- 프로젝트, 커넥터, 데이터셋에 대한 역할 기반 접근 제어
- 민감 컬럼 보호를 위한 쿼리 리라이팅 및 데이터 마스킹

### 감사 및 추적
- 컴플라이언스를 위한 계보 추적과 변경 불가능한 세션 로그
- 결과 공유 전 행 데이터 제한, 통계적 신뢰도 검사

### 자격 증명 관리
- 민감 자격 증명은 `.env` 대신 시크릿 매니저에 저장
- 로컬 테스트는 `.env.example`을 복제하여 사용